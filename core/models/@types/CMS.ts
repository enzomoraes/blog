export namespace CMS {
  /**
   * This file was auto-generated by openapi-typescript.
   * Do not make direct changes to the file.
   */

  export interface paths {
    '/images': {
      post: {
        responses: {
          /** @description Image uploaded */
          200: {
            content: {
              'application/json': components['schemas']['ImageCreated'];
              'application/xml': components['schemas']['ImageCreated'];
            };
          };
        };
      };
    };
    '/posts': {
      get: {
        responses: {
          /** @description List of Posts */
          200: {
            content: {
              'application/json': components['schemas']['PostPaginated'];
              'application/xml': components['schemas']['PostPaginated'];
            };
          };
        };
      };
      post: {
        /** @description Creating new post */
        requestBody: {
          content: {
            'application/json': components['schemas']['PostCreate'];
            'application/xml': components['schemas']['PostCreate'];
          };
        };
        responses: {
          /** @description New Post */
          200: {
            content: {
              'application/json': components['schemas']['Post'];
              'application/xml': components['schemas']['Post'];
            };
          };
        };
      };
    };
  }

  export type webhooks = Record<string, never>;

  export interface components {
    schemas: {
      Post: {
        /** @example 1 */
        id: string;
        /** @example título de um post */
        title: string;
        /** @example titulo-de-um-post */
        slug: string;
        /** @example javascript,html */
        tags: string;
        /** @example ##Markup */
        body: string;
        images: components['schemas']['Image'][];
        /** @example Mon Jan 30 2023 21:15:53 GMT-0400 (Amazon Standard Time) */
        createdAt: string;
      };
      PostPaginated: {
        content: components['schemas']['Post'][];
        /** @example 5 */
        rows: number;
        /** @example 0 */
        page: number;
        /** @example 10 */
        totalRecords: number;
      };
      PostCreate: {
        /** @example título de um post */
        title: string;
        /** @example titulo-de-um-post */
        slug: string;
        /** @example javascript,html */
        tags: string;
        /** @example ##Markup */
        body: string;
        /**
         * @example [
         *   "1",
         *   "2"
         * ]
         */
        imagesIds: string[];
      };
      Image: {
        /** @example 1 */
        id: string;
        /** @example base64 */
        small: string;
        /** @example base64 */
        medium: string;
        /** @example base64 */
        large: string;
      };
      ImageCreated: {
        /** @example image created succesfully */
        message: string;
        /** @example 1 */
        id: string;
      };
      PaginateQuery: {
        rows: components['parameters']['rows'];
        page: components['parameters']['page'];
        order: components['parameters']['order'];
      };
    };
    responses: never;
    parameters: {
      /** @description rows to be returned in one page */
      rows: number;
      /** @description page index of pagination */
      page: number;
      /**
       * @description order of pagination [ field,order ]
       * @example title,asc
       */
      order: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
  }

  export type external = Record<string, never>;

  export type operations = Record<string, never>;
}
